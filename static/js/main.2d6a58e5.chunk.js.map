{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","tipsArray","useRef","useState","bill","setBill","people","setPeople","tipPer","setTipPer","selected","setSelected","Number","toFixed","total","setTotal","tipValue","setTipValue","useEffect","console","log","parseFloat","current","className","type","name","id","value","onChange","e","isNaN","target","map","element","index","onClick","placeholder","replace","style","parseInt","display","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d6a58e5.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction App() {\r\n  const tipsArray = useRef([5, 10, 15, 25, 50]);\r\n  const [bill, setBill] = useState(\"\");\r\n  const [people, setPeople] = useState(\"\");\r\n  const [tipPer, setTipPer] = useState(\"\");\r\n  const [selected, setSelected] = useState(\"\");\r\n  const [total, setTotal] = useState(Number(0).toFixed(2));\r\n  const [tipValue, setTipValue] = useState(Number(0).toFixed(2));\r\n\r\n  useEffect(() => {\r\n    //total value update per person\r\n    if (people && Number(people) !== 0 && tipValue && bill) {\r\n      console.log(\"here\");\r\n      setTotal(\r\n        Number(\r\n          (parseFloat(bill) + parseFloat(tipValue * people)) / people\r\n        ).toFixed(2)\r\n      );\r\n    } else {\r\n      setTotal(Number(\"0\").toFixed(2));\r\n    }\r\n  }, [people, tipValue, bill]);\r\n\r\n  useEffect(() => {\r\n    //tip value update per person\r\n    if (\r\n      (selected !== \"\" || tipPer) &&\r\n      people !== \"\" &&\r\n      Number(people) !== 0 &&\r\n      bill !== \"\"\r\n    ) {\r\n      if (tipPer) {\r\n        setTipValue(\r\n          ((Number(bill) * Number(tipPer)) / 100 / people).toFixed(2)\r\n        );\r\n      } else {\r\n        setTipValue(\r\n          (\r\n            Number(Number(bill) * tipsArray.current[selected]) /\r\n            100 /\r\n            people\r\n          ).toFixed(2)\r\n        );\r\n      }\r\n    } else if (tipPer === \"\" || !people || Number(people) === 0) {\r\n      setTipValue(Number(0).toFixed(2));\r\n    }\r\n  }, [bill, tipPer, selected, people]);\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"title\">\r\n        <p>spli</p>\r\n        <p>tter</p>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"interface\">\r\n          <div className=\"bill\">\r\n            <p>Bill</p>\r\n\r\n            <input\r\n              aria-label=\"bill Input\"\r\n              className=\"billInput\"\r\n              type=\"text\"\r\n              name=\"bill\"\r\n              id=\"bill\"\r\n              value={bill}\r\n              onChange={(e) => {\r\n                //only allow ints and decimal numbers\r\n                if (isNaN(Number(e.target.value))) {\r\n                  return;\r\n                } else {\r\n                  setBill(e.target.value);\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"tip\">\r\n            <p>Select Tip %</p>\r\n            <div className=\"buttons\">\r\n              {/* tips buttons array */}\r\n              {tipsArray.current.map((element, index) => {\r\n                return (\r\n                  <button\r\n                    aria-label={`tip ${element}%`}\r\n                    key={index}\r\n                    className={`btn ${index === selected ? \"selected\" : \"\"}`}\r\n                    onClick={() => {\r\n                      setSelected(index);\r\n                      setTipPer(\"\");\r\n                    }}\r\n                  >\r\n                    {element}%\r\n                  </button>\r\n                );\r\n              })}\r\n              <input\r\n                aria-label=\"Custom tip percent input\"\r\n                className=\"tipPercent\"\r\n                type=\"text\"\r\n                name=\"tipPercent\"\r\n                id=\"tipPercent\"\r\n                placeholder=\"Custom\"\r\n                value={tipPer}\r\n                onClick={() => {\r\n                  setSelected(\"\");\r\n                }}\r\n                onChange={(e) => {\r\n                  // only allow ints\r\n                  setTipPer(e.target.value.replace(/[^0-9]/g, \"\"));\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"people\">\r\n            <div className=\"peopleText\">\r\n              <p>Number of People</p>\r\n              <p\r\n                className=\"error\"\r\n                style={parseInt(people) === 0 ? { display: \"block\" } : {}}\r\n              >\r\n                Can't be zero\r\n              </p>\r\n            </div>\r\n\r\n            <input\r\n              style={parseInt(people) === 0 ? { border: \"2px solid red\" } : {}}\r\n              className={`numPeople`}\r\n              type=\"text\"\r\n              name=\"NumPeople\"\r\n              id=\"NumPeople\"\r\n              value={people}\r\n              onChange={(e) => {\r\n                //only allow ints\r\n                setPeople(e.target.value.replace(/[^0-9]/g, \"\"));\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"display\">\r\n          <div className=\"values\">\r\n            <div className=\"tipAmount\">\r\n              <div className=\"textContainer\">\r\n                <p> Tip Amount</p>\r\n                <p className=\"perPerson\">/ person</p>\r\n              </div>\r\n              <div className=\"tipAmountVal\">${tipValue}</div>\r\n            </div>\r\n            <div className=\"total\">\r\n              <div className=\"textContainer\">\r\n                <p>Total</p>\r\n                <p className=\"perPerson\">/ person</p>\r\n              </div>\r\n\r\n              <div className=\"totalVal\">${total}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <button\r\n            className=\"reset\"\r\n            onClick={() => {\r\n              setBill(\"\");\r\n              setPeople(\"\");\r\n              setSelected(\"\");\r\n              setTipPer(\"\");\r\n              setTotal(Number(0).toFixed(2));\r\n              setTipValue(Number(0).toFixed(2));\r\n            }}\r\n          >\r\n            RESET\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}